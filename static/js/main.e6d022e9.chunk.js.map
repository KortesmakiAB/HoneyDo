{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","addTodo","initialState","task","useState","taskFormInput","setTaskFormInput","className","onSubmit","evt","preventDefault","id","uuid","isChecked","htmlFor","type","name","value","placeholder","onChange","target","Todo","updateCheck","spanTag","style","textDecoration","TodoList","todos","setTodos","todoObj","map","todo","newTodo","onClick","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAkDeA,EA9CK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEbC,EAAe,CACjBC,KAAM,IAGV,EAA0CC,mBAASF,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAsBA,OACI,uBAAMC,UAAU,cAAcC,SArBb,SAACC,GAClBA,EAAIC,iBAEJT,EAAQ,2BACDI,GADA,IAEHM,GAAIC,cACJC,WAAW,KAGfP,EAAiBJ,IAYjB,UACI,uBAAOK,UAAU,oBAAoBO,QAAQ,WAA7C,sBACA,uBACIC,KAAK,OACLJ,GAAG,WACHJ,UAAU,oBACVS,KAAK,OACLC,MAAQZ,EAAcF,KACtBe,YAAY,uBACZC,SAlBS,SAACV,GAClB,MAAwBA,EAAIW,OAApBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdX,GAAiB,iCACZU,EAAOC,SAiBR,kDCVGI,G,YAhCF,SAAC,GAA0C,IAAxCV,EAAuC,EAAvCA,GAAIR,EAAmC,EAAnCA,KAAMU,EAA6B,EAA7BA,UAAWS,EAAkB,EAAlBA,YAc3BC,EAAWV,EAAoC,sBAAMW,MAAO,CAACC,eAAgB,gBAA9B,SAAiDtB,IAAzE,+BAAQA,IAErC,OACI,qBAAII,UAAU,gBAAd,UACI,uBAAOO,QAASH,IAChB,uBACIA,GAAIA,EACJK,KAAK,WACLD,KAAK,WACLI,SArBQ,SAAAV,GAChB,IAAQE,EAAOF,EAAIW,OAAXT,GAIRW,EAAY,CACRT,UAHJA,GAAYA,EAIRF,KACAR,UAcII,UAAU,eAGZgB,OCSCG,EAlCE,WAEb,MAA0BtB,mBAAS,IAAnC,mBAAOuB,EAAP,KAAcC,EAAd,KAMMN,EAAc,SAAAO,GAChBD,GAAS,SAAAD,GAAK,OAAKA,EAAMG,KAAI,SAAAC,GAAI,OAAIA,EAAKpB,KAAOkB,EAAQlB,GAAKkB,EAAUE,SAO5E,OACI,gCACI,cAAC,EAAD,CAAa9B,QAdL,SAAA+B,GACZJ,GAAS,SAAAD,GAAK,4BAAQA,GAAR,CAAeK,UAczB,wBAAQzB,UAAU,kBAAkB0B,QAPxB,WAChBL,GAAS,SAAAD,GAAK,OAAIA,EAAMO,QAAO,SAAAH,GAAI,OAAKA,EAAKlB,iBAMzC,yBACA,oBAAIN,UAAU,cAAd,SACMoB,EAAMG,KAAI,gBAAGnB,EAAH,EAAGA,GAAIR,EAAP,EAAOA,KAAMU,EAAb,EAAaA,UAAb,OACR,cAAC,EAAD,CAEAF,GAAIA,EACJR,KAAMA,EACNU,UAAWA,EACXS,YAAaA,GAJRX,YCZVwB,MAbf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,iDAEF,sBAAMA,UAAU,WAAhB,SACE,cAAC,EAAD,UCEO6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6d022e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport './NewTodoForm.css';\r\n\r\nconst NewTodoForm = ({ addTodo }) => {\r\n\r\n    const initialState = {\r\n        task: ''\r\n    };\r\n\r\n    const [taskFormInput, setTaskFormInput] = useState(initialState)\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n\r\n        addTodo({\r\n            ...taskFormInput,\r\n            id: uuid(),\r\n            isChecked: false\r\n        });\r\n\r\n        setTaskFormInput(initialState);\r\n    }\r\n\r\n    const handleChange = (evt) => {\r\n        const { name, value } = evt.target;\r\n\r\n        setTaskFormInput(() => ({\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <form className=\"NewTodoForm\" onSubmit={ handleSubmit }>\r\n            <label className=\"NewTodoForm-label\" htmlFor=\"new-task\">New task</label>\r\n            <input \r\n                type=\"text\" \r\n                id=\"new-task\"\r\n                className=\"NewTodoForm-input\"\r\n                name=\"task\"\r\n                value={ taskFormInput.task }\r\n                placeholder=\" Honey-Do List Items\"\r\n                onChange={ handleChange }    \r\n            >\r\n            </input>\r\n            <button>Add Task</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default NewTodoForm;","import React from 'react';\r\nimport './Todo.css';\r\n\r\nconst Todo = ({ id, task, isChecked, updateCheck }) => {\r\n\r\n    const handleCheck = evt => {\r\n        const { id } = evt.target;\r\n\r\n        isChecked = isChecked ? false : true;\r\n\r\n        updateCheck({\r\n            isChecked,\r\n            id,\r\n            task\r\n        });\r\n    };\r\n\r\n    const spanTag = !isChecked ? <span>{ task }</span> : <span style={{textDecoration: 'line-through'}}>{ task }</span>\r\n    \r\n    return (\r\n        <li className=\"Todo-noBullet\">\r\n            <label htmlFor={id}></label>\r\n            <input \r\n                id={id} \r\n                name=\"checkbox\" \r\n                type=\"checkbox\" \r\n                onChange={ handleCheck }\r\n                className=\"Todo-input\"\r\n            >\r\n            </input>\r\n            { spanTag }\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = () => {\r\n   \r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = newTodo => {\r\n        setTodos(todos => [...todos, newTodo]);\r\n    };\r\n\r\n    const updateCheck = todoObj => {\r\n        setTodos(todos =>  todos.map(todo => todo.id === todoObj.id ? todoObj : todo ));\r\n    }\r\n\r\n    const removeTasks = () => {\r\n        setTodos(todos => todos.filter(todo => !todo.isChecked)) ;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <NewTodoForm addTodo={ addTodo } />\r\n            <button className=\"TodoList-remove\" onClick={ removeTasks }>Remove Task</button>\r\n            <ul className=\"TodoList-ul\">\r\n                { todos.map(({ id, task, isChecked }) => \r\n                    <Todo \r\n                    key={id}\r\n                    id={id}\r\n                    task={task}\r\n                    isChecked={isChecked}\r\n                    updateCheck={updateCheck}\r\n                />)}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Honey-Do List</h1>\n      </header>\n      <main className=\"App-main\">\n        <TodoList />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}